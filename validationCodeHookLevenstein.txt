var AWS = require("aws-sdk");
var docClient = new AWS.DynamoDB.DocumentClient();

function elicitSlot(sessionAttributes, intentName, slots, slotToElicit, message) {
    console.log("Got to Elicit Slot Function");
    console.log("elicitSlot SessionAttributes: " +JSON.stringify(sessionAttributes));
    console.log("elicitSlot IntentName: " +JSON.stringify(intentName));
    console.log("elicitSlot Slots: " +JSON.stringify(slots));
    console.log("elicitSlot Slot to Elicit: " +JSON.stringify(slotToElicit));
    console.log("elicitSlot Message: " +JSON.stringify(message));
    
    return {
        sessionAttributes,
        dialogAction: {
            type: 'ElicitSlot',
            intentName,
            slots,
            slotToElicit,
            message,
        
        },
    };
}

function confirmIntent(sessionAttributes, intentName, slots, message) {
    // add to transcript 
    return {
        sessionAttributes,
        dialogAction: {
            type: 'ConfirmIntent',
            intentName,
            slots,
            message,
        },
    };
}

function close(sessionAttributes, fulfillmentState, message) {
    return {
        sessionAttributes,
        dialogAction: {
            type: 'Close',
            fulfillmentState,
            message,
        },
    };
}
 
function delegate(sessionAttributes, slots) {
    return {
        sessionAttributes,
        dialogAction: {
            type: 'Delegate',
            slots,
        },
    };
}
 
 function delegate(sessionAttributes, slots) {
    return {
        sessionAttributes,
        dialogAction: {
            type: 'Delegate',
            slots,
        },
    };
}

//---everything above here is standard validation code hook stuff---

function calculateLevDistance(src, tgt, cb) {
    var realCost;
    
    var srcLength = src.length,
        tgtLength = tgt.length,
        tempString, tempLength; // for swapping
    
    var resultMatrix = new Array();
        resultMatrix[0] = new Array(); // Multi dimensional
    
    // To limit the space in minimum of source and target,
    // we make sure that srcLength is greater than tgtLength
    if (srcLength < tgtLength) {
        tempString = src; src = tgt; tgt = tempString;
        tempLength = srcLength; srcLength = tgtLength; tgtLength = tempLength;
    }
    
    for (var c = 0; c < tgtLength+1; c++) {
        resultMatrix[0][c] = c;
    }
    
    for (var i = 1; i < srcLength+1; i++) {
        resultMatrix[i] = new Array();
        resultMatrix[i][0] = i;
        for (var j = 1; j < tgtLength+1; j++) {
            realCost = (src.charAt(i-1) == tgt.charAt(j-1))? 0: 1;
            resultMatrix[i][j] = Math.min(
                resultMatrix[i-1][j]+1,
                resultMatrix[i][j-1]+1,
                resultMatrix[i-1][j-1] + realCost // same logic as our previous example.
            ); 
        }
    }
    
	console.log("calculateLevDistance called with source: " + src + ", target: " + tgt + ", result: " + resultMatrix[srcLength][tgtLength]);
    cb(resultMatrix[srcLength][tgtLength]);
}

function loggingCallback(response, originalCallback) {
    console.log(JSON.stringify(response, null, 2));
    originalCallback(null, response);
}

exports.handler = (event, context, callback) => {
        console.log("incoming event details: " + JSON.stringify(event));
        dispatch(event, (response) => loggingCallback(response, callback));
};

function dispatch(intentRequest, callback) {
    return getPlan(intentRequest, callback);
}

function getPlan(intentRequest, callback) {
    console.log("incoming event details: " + JSON.stringify(intentRequest));
	
	var outputSessionAttributes = intentRequest.sessionAttributes;
	var slots = intentRequest.currentIntent.slots;
	var memberId = intentRequest.sessionAttributes.memberId;
	var rawInput = intentRequest.currentIntent.slots.PlanName;
	
	var paramsQuery = {
		TableName: 'ownershipTable',
		KeyConditionExpression: "memberId = :varNumber",
		ExpressionAttributeValues: 
				{
   					":varNumber": memberId
  				}
 			};
			
	console.log("Query string: " + paramsQuery);
	
	docClient.query(paramsQuery, function(err, data) 
	{
  		if (err) 
		{
		    outputSessionAttributes.found = false;
    	    callback(delegate(outputSessionAttributes, slots));
    	    return;
  		} 
		else 
		{
   			console.log("DynamoDB Query Results:" + JSON.stringify(data));
      
   			if (data.Items.length === 1) 
			{
			    console.log("Found plan names for memberId: " + data.Items[0].planNames);
				outputSessionAttributes.found = true;
    		    var planNames = data.Items[0].planNames;
    		    var plans = planNames.split(",");
				var lowestDistance = 9999;
				var closestPlanName = "";
				for (var i = 0; i < plans.length; i++) {
					var planName = plans[i].replace("\"","").replace("\"","");
					console.log("Found plan: " + planName);
					
					calculateLevDistance(rawInput, planName, function(distance) {
    					if (Number(distance) < lowestDistance) 
    					{
    						console.log("Found new lowest value: " + planName + ", with distance: " + distance);
    						lowestDistance = Number(distance);
    						closestPlanName = planName;
    					}                        
                    });
				}				
				
				console.log("Done looping through plan names. found the closest match to " + rawInput + " is " + closestPlanName + " with an edit distance of: " + lowestDistance);
				outputSessionAttributes.closestPlanName = closestPlanName;
                callback(close(outputSessionAttributes, 'Fulfilled', { contentType: 'PlainText', content: `Okay.` }));
                return;
   			} 
			else 
			{
    				console.log("memberId not found");
					outputSessionAttributes.found = false;
    				callback(delegate(outputSessionAttributes, slots));
    				return;
   			}
  		}
 	});
}
        
        
