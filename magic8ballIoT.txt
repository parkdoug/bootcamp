'use strict';
 
/**
* This is a sample Lambda function that sends an Email on click of a
* button. It creates a SNS topic, subscribes an endpoint (EMAIL)
* to the topic and publishes to the topic.
*
* Follow these steps to complete the configuration of your function:
*
* 1. Update the email environment variable with your email address.
* 2. Enter a name for your execution role in the "Role name" field.
*    Your function's execution role needs specific permissions for SNS operations
*    to send an email. We have pre-selected the "AWS IoT Button permissions"
*    policy template that will automatically add these permissions.
*/
 
var Quotation = new Array();
Quotation[0] = "It is certain";
Quotation[1] = "It is decidedly so";
Quotation[2] = "Without a doubt";
Quotation[3] = "Yes definitely";
Quotation[4] = "You may rely on it";
Quotation[5] = "As I see it, yes";
Quotation[6] = "Most likely";
Quotation[7] = "Outlook good";
Quotation[8] = "Yes";
Quotation[9] = "Signs point to yes";
Quotation[10] = "Reply hazy try again";
Quotation[11] = "Ask again later";
Quotation[12] = "Better not tell you now";
Quotation[13] = "Cannot predict now";
Quotation[14] = "Concentrate and ask again";
Quotation[15] = "Don't count on it";
Quotation[16] = "My reply is no";
Quotation[17] = "My sources say no";
Quotation[18] = "Outlook not so good";
Quotation[19] = "Very doubtful";
 
var Q = Quotation.length;
var thisAnswer = Math.round(Math.random()*(Q-1));
var thisQuote = Quotation[thisAnswer];
 
const AWS = require('aws-sdk');
 
const EMAIL = process.env.email;
const SNS = new AWS.SNS({ apiVersion: '2010-03-31' });
 
 
function findExistingSubscription(topicArn, nextToken, cb) {
    const params = {
        TopicArn: topicArn,
        NextToken: nextToken || null,
    };
    SNS.listSubscriptionsByTopic(params, (err, data) => {
        if (err) {
            console.log('Error listing subscriptions.', err);
            return cb(err);
        }
        const subscription = data.Subscriptions.filter((sub) => sub.Protocol === 'email' && sub.Endpoint === EMAIL)[0];
        if (!subscription) {
            if (!data.NextToken) {
                cb(null, null); // indicate that no subscription was found
            } else {
                findExistingSubscription(topicArn, data.NextToken, cb); // iterate over next token
            }
        } else {
            cb(null, subscription); // a subscription was found
        }
    });
}
 
/**
* Subscribe the specified EMAIL to a topic.
*/
function createSubscription(topicArn, cb) {
    // check to see if a subscription already exists
    findExistingSubscription(topicArn, null, (err, res) => {
        if (err) {
            console.log('Error finding existing subscription.', err);
            return cb(err);
        }
        if (!res) {
            // no subscription, create one
            const params = {
                Protocol: 'email',
                TopicArn: topicArn,
                Endpoint: EMAIL,
            };
            SNS.subscribe(params, (subscribeErr) => {
                if (subscribeErr) {
                    console.log('Error setting up email subscription.', subscribeErr);
                    return cb(subscribeErr);
                }
                // subscription complete
                console.log(`Subscribed ${EMAIL} to ${topicArn}.`);
                cb(null, topicArn);
            });
        } else {
            // subscription already exists, continue
            cb(null, topicArn);
        }
    });
}
 
/**
* Create a topic.
*/
function createTopic(topicName, cb) {
    SNS.createTopic({ Name: topicName }, (err, data) => {
        if (err) {
            console.log('Creating topic failed.', err);
            return cb(err);
        }
        const topicArn = data.TopicArn;
        console.log(`Created topic: ${topicArn}`);
        console.log('Creating subscriptions.');
        createSubscription(topicArn, (subscribeErr) => {
            if (subscribeErr) {
                return cb(subscribeErr);
            }
            // everything is good
            console.log('Topic setup complete.');
            cb(null, topicArn);
        });
    });
}
 
/**
* The following JSON template shows what is sent as the payload:
{
    "serialNumber": "GXXXXXXXXXXXXXXXXX",
    "batteryVoltage": "xxmV",
    "clickType": "SINGLE" | "DOUBLE" | "LONG"
}
*
* A "LONG" clickType is sent if the first press lasts longer than 1.5 seconds.
* "SINGLE" and "DOUBLE" clickType payloads are sent for short clicks.
*
* For more documentation, follow the link below.
* http://docs.aws.amazon.com/iot/latest/developerguide/iot-lambda-rule.html
*/
exports.handler = (event, context, callback) => {
    console.log('Received event:', event.clickType);
 
    // create/get topic
    createTopic('aws-iot-button-sns-topic', (err, topicArn) => {
        if (err) {
            return callback(err);
        }
        console.log(`Publishing to topic ${topicArn}`);
        // publish message
        const params = {
            Message: `${event.serialNumber} -- processed by Lambda\n\nMagic 8 Ball Response: $thisQuote \n\nBattery voltage: ${event.batteryVoltage}`,
            Subject: `Hello from your IoT Button ${event.serialNumber}: ${event.clickType}`,
            TopicArn: topicArn,
        };
        // result will go to function callback
        SNS.publish(params, callback);
    });
};
